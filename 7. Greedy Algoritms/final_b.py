"""
ID решения: 55488740

---ПРИНЦИП РАБОТЫ---
    Считываются числа из которых надо составить 2 множества с одинаковой суммой.
    После чего создается динамика размерностью n/2 + 1, где n - сумма полученных
    чисел. Все значения в ней инициализируются значением -1, кроме первой (с индексом 0).
    По сути с помощью этой динамики мы определяем, возможно ли из предоставленных
    чисел собрать полусумму от начальной суммы. Если сумма вышла нечетной, то мы сразу
    возвращаем False. Иначе мы берем число из начального
    множества, проходим по динамике от конца до индекса "число - 1", и если в ячейке
    динамики лежит -1 (сумму равную текущему индексу до этого не получали) и в ячейке
    "индекс - число" лежит НЕ -1 (т.е. сумму равную индекс минус число получали до
    этого из предыдущих рассматриваемых чисел), то в ячейку динамики записываем
    текущее число. После просмотра всех чисел, мы смотрим на получившуюся динамику.
    Если в последней ячейке находится -1, значит полусумму из получившихся чисел собрать
    не удалось, возвращаем False. Иначе числа можно разбить на 2 группы с одинаковой
    суммой.

---ВРЕМЕННАЯ СЛОЖНОСТЬ---
    Построение загодовки динамики занимает O(n/2 + 1) = O(n) времени, где n - сумма начальныз
    чисел. Ее заполнение в худшем случае (если нам дали одни единицы) занимает еще O(nm), где
    m - количество чисел. Итоговая временная сложность составляет O(nm)

---ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ---
    Для алгоритма требуется одномерная динамика размером (n/2 + 1), где n - сумма начальных
    чисел. Итоговая пространственная сложность составляет O(n)
"""


from typing import List


def is_exist_half_sum(nums: List[int]) -> bool:
    s = sum(nums)
    if s % 2 == 1:
        return False
    mid = s // 2
    half_sum = [-1 for _ in range(mid + 1)]
    half_sum[0] = 0
    for value in nums:
        for i in range(mid, value - 1, -1):
            if half_sum[i] == -1 and half_sum[i-value] != -1:
                half_sum[i] = value
    if half_sum[mid] == -1:
        return False
    return True


if __name__ == '__main__':
    _ = input()
    nums = [int(x) for x in input().split()]
    print(is_exist_half_sum(nums))
