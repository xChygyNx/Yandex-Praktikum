""" 
ID решения: 52438636


--- ПРИНЦИП РАБОТЫ --- 

    Создается экземпляр класса SearchIndex, в котором будут хранится в удобном виде 
    считанные документы.
    Затем происходит считывание документов. Документы сохраняются в виде словаря,
    где ключи - это слова, встретившиеся в документах, а значения - вложенные словари,
    где ключ - номер документа, значение - количество вхождений слова в документ.

    Дальше идет расчет релевантности запросов документам. Создается результирующий пустой
    список. Подсчет релевантности происходит следующим образом: считывается количество запросов,
    в цикле считываются сами запросы. Перед обработкой каждого запроса создается впеменный
    словарь, в котором ключами будут выступать номера документов, значениями - релевантность
    запроса данному документу. Затем каждый запрос разбивается на множество слов,проходим
    вложенным циклом по словам,по слову из словаря документов получаем в каких документах
    и сколько раз встречается это слово. Во временном словаре увеличиваем
    релевантность запроса соответствующему документу на количество вхождений слова. Так 
    проходим по всем словам в запросе. После чего преобразуем получившийся временный
    словарь в список кортежей, где первый элемент - релевантность документа умноженная
    на -1 (надо для дефолтной сортировки), второй - номер документа. После преобразования
    словаря в список кортежей список сортируется и усекается до 5 элементов. Полученный список
    добавляется в конец результирующего спискго. Процедура повторяется для всех запросов.
    Полученный таким способом список распечатывается в консоль (естественно с некоторыми 
    нехитрыми преобразованиями) 

--- ВРЕМЕННАЯ СЛОЖНОСТЬ --- 

    Считывание и сохранение документов и запросов занимает O(n), процесс подсчета релевантности 
    O(n * m),где n - количество документов и запросов, m - количество слов в них 

--- ПРОСТРАНСТВЕННЯ СЛОЖНОСТЬ --- 
    Хранение словарей с документами и запросами занимает O(n * m) дополнительной памяти,где 
    n - количество документов и запросов, m - количество слов в них, результирующий список 
    еще в среднем O(5n). Итоговая пространственная сложность составляет O(n * m)
"""

from typing import List, Tuple, Dict


class SearchIndex:
    def __init__(self):
        self.docs = {}

    def hashing_doc(self, doc: str, iteration: int):
        for word in doc.split():
            tmp = self.docs.get(word, {})
            tmp[iteration + 1] = tmp.get(iteration + 1, 0) + 1
            self.docs[word] = tmp

    def sort_request_score(self, request: Dict[int, int]):
        result = []
        for key, value in request.items():
            result.append((-1 * value, key))
        result.sort()
        return result[:5]

    def analysis(self) -> List[Tuple[int, int]]:
        result = []
        n_request = int(input())
        for _ in range(n_request):
            tmp = {}
            for request_word in set(input().split()):
                try:
                    doc_info = self.docs[request_word]
                    for num_doc, score in doc_info.items():
                        tmp[num_doc] = tmp.get(num_doc, 0) + score
                except KeyError:
                    pass
            result.append(self.sort_request_score(tmp))

        return result


def print_relevant_info(relevant_info: List[List[Tuple[int, int]]]) -> None:
    result = []
    for line in relevant_info:
        result.append(' '.join((str(x[1]) for x in line if x[0] != 0)))
    print('\n'.join(result))


if __name__ == '__main__':
    s_ind = SearchIndex()
    for i in range(int(input())):
        s_ind.hashing_doc(input(), i)
    relevant_info = s_ind.analysis()
    print_relevant_info(relevant_info) 